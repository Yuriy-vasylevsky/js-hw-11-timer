{"version":3,"sources":["index.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockface","body","clockfaceDays","clockfaceHours","clockfaceMins","clockfaceSecs","clockfaceDay","console","log","Timer","constructor","onTick","targetDate","intervalid","isActive","init","time","getTimeComponents","start","startTime","setInterval","currentTime","Date","now","deltatime","classList","add","stop","clearInterval","pad","value","String","padStart","days","Math","floor","hours","mins","sec","timer2","selector","updateClockface","textContent","addEventListener","bind"],"mappings":";;;AAgGC,aAhGD,QAAA,oBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,iBAClCG,KAAMJ,SAASC,cAAc,QAE7BI,cAAeL,SAASC,cAAc,2BACtCK,eAAgBN,SAASC,cAAc,4BACvCM,cAAeP,SAASC,cAAc,2BACtCO,cAAeR,SAASC,cAAc,4BAGxCH,EAAKW,aACLC,QAAQC,IAAIb,EAAKW,cAEjB,MAAMG,EACJC,aAAa,OAACC,EAAD,WAASC,IACfC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXH,KAAAA,OAASA,EACTC,KAAAA,WAAaA,EACbG,KAAAA,OACLR,QAAQC,IAAI,KAAKI,YAInBG,OACQC,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BN,KAAAA,OAAOK,GAGdE,QAEM,GAAA,KAAKJ,SACP,OAIIK,MAAAA,EAAY,KAAKP,WAClBE,KAAAA,UAAW,EACXD,KAAAA,WAAaO,YAAY,KACvBN,KAAAA,UAAW,EACVO,MAAAA,EAAcC,KAAKC,MACnBC,EAAYL,EAAYE,EACxBL,EAAO,KAAKC,kBAAkBO,GACpCjB,QAAQC,IAAIQ,GACPL,KAAAA,OAAOK,GAGZrB,EAAKM,KAAKwB,UAAUC,IAAI,QACxB,KAGJC,OACEC,cAAc,KAAKf,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BN,KAAAA,OAAOK,GAGda,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCf,kBAAmBD,GAKV,MAAA,CAACiB,KAJK,KAAKJ,IAAIK,KAAKC,MAAMnB,EAAQ,QAI3BoB,MAHA,KAAKP,IAAIK,KAAKC,MAAOnB,EAAQ,MAAwB,OAG9CqB,KAFR,KAAKR,IAAIK,KAAKC,MAAOnB,EAAQ,KAAoB,MAEnCsB,IADf,KAAKT,IAAIK,KAAKC,MAAOnB,EAAQ,IAAc,QAU3D,MAAMuB,EAAS,IAAI9B,EAAM,CACrB+B,SAAU,WACV5B,WAAY,IAAIU,KAAK,wBACrBX,OAAQ8B,IAMZ,SAASA,GAAgB,KAACR,EAAD,MAAOG,EAAP,KAAcC,EAAd,IAAoBC,IAE3C3C,EAAKO,cAAcwC,eAAiBT,IACpCtC,EAAKQ,eAAeuC,eAAiBN,IACrCzC,EAAKS,cAAcsC,eAAiBL,IACpC1C,EAAKU,cAAcqC,eAAiBJ,IARtC3C,EAAKC,SAAS+C,iBAAiB,QAASJ,EAAOrB,MAAM0B,KAAKL,IAC1D5C,EAAKI,QAAQ4C,iBAAiB,QAASJ,EAAOZ,KAAKiB,KAAKL","file":"src.3497a2ad.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n  body: document.querySelector('body'),\n\n  clockfaceDays: document.querySelector('span[data-value=\"days\"]'),\n  clockfaceHours: document.querySelector('span[data-value=\"hours\"]'),\n  clockfaceMins: document.querySelector('span[data-value=\"mins\"]'),\n  clockfaceSecs: document.querySelector('span[data-value=\"secs\"]'),\n};\n\nrefs.clockfaceDay\nconsole.log(refs.clockfaceDay)\n\nclass Timer {\n  constructor ({onTick, targetDate}) {\n    this.intervalid = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.targetDate = targetDate;\n    this.init();\n    console.log(this.targetDate)\n  }\n    \n\n  init() {\n    const time = this.getTimeComponents(0)\n    this.onTick(time)\n  }\n\n  start() {\n\n    if (this.isActive) {\n      return\n    }\n\n    // const startTime = Date.now();\n    const startTime = this.targetDate;\n    this.isActive = true\n    this.intervalid = setInterval(() =>{\n      this.isActive = true\n      const currentTime = Date.now();\n      const deltatime = startTime - currentTime;\n      const time = this.getTimeComponents(deltatime)\n      console.log(time)\n      this.onTick(time)\n      // updateClockface(time)\n      // console.log(`${days} : ${hours} : ${mins} : ${sec}`)\n      refs.body.classList.add('img')\n    },1000); \n  }\n\n  stop() {\n    clearInterval(this.intervalid)\n    this.isActive = false\n    const time = this.getTimeComponents(0)\n    this.onTick(time)\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0')\n  }\n\n  getTimeComponents (time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 *60 * 24)) / (1000 * 60 *60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const sec = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return {days, hours, mins, sec};\n  }\n}\n\n\n// const timer = new Timer({\n//   onTick: updateClockface,\n// })\n\nconst timer2 = new Timer({\n    selector: '#timer-1',\n    targetDate: new Date('Sept 17, 2021, 20:00'),\n    onTick: updateClockface,\n});\n\nrefs.startBtn.addEventListener('click', timer2.start.bind(timer2));\nrefs.stopBtn.addEventListener('click', timer2.stop.bind(timer2));\n\nfunction updateClockface({days, hours, mins, sec}) {\n  // refs.clockface.textContent = `${days} :  :  : `; \n  refs.clockfaceDays.textContent = `${days}`;\n  refs.clockfaceHours.textContent = `${hours}`;\n  refs.clockfaceMins.textContent = `${mins}`;\n  refs.clockfaceSecs.textContent = `${sec}`;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}